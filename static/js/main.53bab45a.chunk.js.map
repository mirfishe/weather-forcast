{"version":3,"sources":["app/locationSlice.js","app/weatherSlice.js","components/weather/CurrentWeather.js","components/weather/HourlyForecast.js","components/weather/FiveDayForecast.js","components/weather/Weather.js","components/zipCode/ZipCode.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["locationSlice","createSlice","name","initialState","zipCode","latitude","longitude","zipCodeData","reducers","setZipCode","reducer","state","action","payload","setLatitude","setLongitude","setZipCodeData","actions","weatherSlice","weatherData","setWeatherData","CurrentWeather","props","currentWeatherData","useSelector","weather","current","windSpeed","wind_speed","toPrecision","pressure","temperatureFahrenheit","Math","floor","temp","Col","className","main","humidity","HourlyForecast","hourlyForecastWeatherData","hourly","calculateHour","forecastIndex","hourForecast","Date","getHours","dayPart","Row","map","hourlyForecast","index","Card","CardHeader","CardBody","FiveDayForecast","dailyForecastWeatherData","daily","calculateDay","dayForecast","getDay","dailyForecast","dailyHighTemperatureFahrenheit","max","dailyLowTemperatureFahrenheit","min","Weather","dispatch","useDispatch","location","useState","errWeatherMessage","setErrWeatherMessage","useEffect","url","locationDataAvailable","undefined","process","fetch","then","response","ok","json","Error","status","statusText","data","catch","error","console","log","message","Container","fluid","Alert","color","Jumbotron","hasOwnProperty","timezone","Fragment","xs","ZipCode","txtZipCode","setTxtZipCode","errZipCodeMessage","setErrWZipCodeMessage","sm","Form","FormGroup","Label","for","Input","type","id","size","value","onChange","event","target","Button","outline","onClick","isNaN","lat","lng","App","checkingLocationMessage","setCheckingLocationMessage","locationDataFound","setLocationDataFound","setLocationDataMessage","errLocationData","setErrLocationData","geolocationAvailable","setGeolocationAvailable","showZipCodeForm","setShowZipCodeForm","getLocation","navigator","geolocation","getCurrentPosition","showPosition","position","coords","determineShowZipCodeForm","setTimeout","configureStore","locationReducer","weatherReducer","Boolean","window","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.53bab45a.chunk.js","sourcesContent":["import {createSlice} from \"@reduxjs/toolkit\";\n\nconst componentName = \"locationSlice.js\";\n\nconst initialState = {\n    zipCode: \"\",\n    latitude: \"\",\n    longitude: \"\",\n    zipCodeData: {}\n};\n\nconst locationSlice = createSlice({\n  name: \"location\",\n  initialState,\n  reducers: {\n    setZipCode: {\n      reducer(state, action) {\n        // console.log(componentName, \"setZipCode action.payload\", action.payload);\n        // console.log(componentName, \"setZipCode action.payload.length\", action.payload.length);\n\n        state.zipCode = action.payload;\n\n      }\n    },\n    setLatitude: {\n      reducer(state, action) {\n        // console.log(componentName, \"setLatitude action.payload\", action.payload);\n        // console.log(componentName, \"setLatitude action.payload.length\", action.payload.length);\n\n        state.latitude = action.payload;\n\n      }\n    },\n    setLongitude: {\n      reducer(state, action) {\n        // console.log(componentName, \"setLongitude action.payload\", action.payload);\n        // console.log(componentName, \"setLongitude action.payload.length\", action.payload.length);\n\n        state.longitude = action.payload;\n\n      }\n    },\n    setZipCodeData: {\n      reducer(state, action) {\n        // console.log(componentName, \"setZipCodeData action.payload\", action.payload);\n        // console.log(componentName, \"setZipCodeData action.payload.length\", action.payload.length);\n\n        state.zipCodeData = action.payload;\n\n      }\n    }\n}\n});\n\nexport const {setZipCode, setLatitude, setLongitude, setZipCodeData} = locationSlice.actions;\n\nexport default locationSlice.reducer;","import {createSlice} from \"@reduxjs/toolkit\";\n\nconst componentName = \"weatherSlice.js\";\n\nconst initialState = {\n    weatherData: {},\n    // currentWeather: {},\n    // hourlyForecast: {},\n    // dailyForecast: {}\n};\n\nconst weatherSlice = createSlice({\n  name: \"weather\",\n  initialState,\n  reducers: {\n    setWeatherData: {\n        reducer(state, action) {\n          // console.log(componentName, \"setWeatherData action.payload\", action.payload);\n          // console.log(componentName, \"setWeatherData action.payload.length\", action.payload.length);\n  \n          state.weatherData = action.payload;\n  \n        }\n      },\n    // setCurrentWeather: {\n    //   reducer(state, action) {\n    //     // console.log(componentName, \"setCurrentWeather action.payload\", action.payload);\n    //     // console.log(componentName, \"setCurrentWeather action.payload.length\", action.payload.length);\n\n    //     state.currentWeather = action.payload;\n\n    //   }\n    // },\n    // setHourlyForecast: {\n    //   reducer(state, action) {\n    //     // console.log(componentName, \"setHourlyForecast action.payload\", action.payload);\n    //     // console.log(componentName, \"setHourlyForecast action.payload.length\", action.payload.length);\n\n    //     state.hourlyForecast = action.payload;\n\n    //   }\n    // },\n    // setDailyForecast: {\n    //   reducer(state, action) {\n    //     // console.log(componentName, \"setDailyForecast action.payload\", action.payload);\n    //     // console.log(componentName, \"setDailyForecast action.payload.length\", action.payload.length);\n\n    //     state.dailyForecast = action.payload;\n\n    //   }\n    // }\n}\n});\n\nexport const {setWeatherData/*, setCurrentWeather, setHourlyForecast, setDailyForecast*/} = weatherSlice.actions\n\nexport default weatherSlice.reducer;","import React from \"react\";\nimport {useSelector} from \"react-redux\";\nimport {Col} from \"reactstrap\";\n\nconst CurrentWeather = (props) => {\n\n    const componentName = \"CurrentWeather.js\";\n\n    // console.log(componentName, \"props\", props);\n    // console.log(componentName, \"props.weatherData\", props.weatherData);\n    // let weatherData = props.weatherData;\n    // console.log(componentName, \"weatherData\", weatherData);\n\n    const weatherData = useSelector(state => state.weather.weatherData);\n\n    const currentWeatherData = weatherData.current;\n    // console.log(componentName, \"currentWeatherData\", currentWeatherData);\n\n    // convert wind speed from m/s to mph\n    const windSpeed = (currentWeatherData.wind_speed * 2.23694).toPrecision(2);\n    const pressure = (currentWeatherData.pressure * 0.030).toPrecision(4);\n\n    const temperatureFahrenheit = Math.floor(((currentWeatherData.temp - 273.15) * 1.8) + 32);\n\n    return(\n        <Col className=\"mt-4\">\n            <h4>{currentWeatherData.weather[0].main}</h4>\n            <h5>Temperature <span className=\"ml-2 smallerText\">{temperatureFahrenheit}&#176;</span></h5>\n            <h5>Humidity <span className=\"ml-2 smallerText\">{currentWeatherData.humidity}%</span></h5>\n            <h5>Atmospheric Pressure <span className=\"ml-2 smallerText\">{pressure} in</span></h5>\n            <h5>Wind Speed <span className=\"ml-2 smallerText\">{windSpeed} mph</span></h5>\n        </Col>\n    )\n}\n\nexport default CurrentWeather;","import React from \"react\";\nimport {useSelector} from \"react-redux\";\nimport {Col, Row, Card, CardBody, CardText, CardHeader, CardFooter} from \"reactstrap\";\n\nconst HourlyForecast = (props) => {\n\n    const componentName = \"HourlyForecast.js\";\n\n    const weatherData = useSelector(state => state.weather.weatherData);\n\n    const hourlyForecastWeatherData = weatherData.hourly;\n    // console.log(componentName, \"hourlyForecastWeatherData\", hourlyForecastWeatherData);\n\n    const calculateHour = (forecastIndex) => {\n\n        let currentDate = new Date();\n        let currentHour = currentDate.getHours();\n        // console.log(componentName, \"currentHour\", currentHour);\n\n        let hourForecast = currentHour + forecastIndex + 1; // To account for the index starting at zero.\n        // console.log(componentName, \"hourForecast\", hourForecast);\n\n        // Account for numbers over 24 hours\n        // hourForecast +=  12;\n        if (hourForecast > 24) {\n            hourForecast = hourForecast - 24;\n        };\n\n        let dayPart = \"am\";\n        if (hourForecast > 11 && hourForecast < 24) {\n            dayPart = \"pm\";\n        };\n\n        if (hourForecast > 12) {\n            hourForecast = hourForecast - 12;\n        };\n\n        return hourForecast + \" \" + dayPart;\n    };\n\n    return(\n        <Row className=\"justify-content-center my-4\">\n        {hourlyForecastWeatherData.map((hourlyForecast, index) => {\n\n            // convert wind speed from m/s to mph\n            let windSpeed = (hourlyForecast.wind_speed * 2.23694).toPrecision(2);\n            let pressure = (hourlyForecast.pressure * 0.030).toPrecision(4);\n\n            let temperatureFahrenheit = Math.floor(((hourlyForecast.temp - 273.15)*1.8)+32);\n\n            return (\n                index % 3 === 0 && index < 12 ? \n                <Card key={index} className=\"m-2\">\n                    <CardHeader>\n                        <h3 className=\"text-center\">{calculateHour(index)}</h3>\n                    </CardHeader>\n                    <CardBody>\n                        <h4 className=\"text-center\">{hourlyForecast.weather[0].main}</h4>\n                        <h5>Temperature <span className=\"ml-2 smallerText\">{temperatureFahrenheit}&#176;</span></h5>\n                        <h5>Humidity <span className=\"ml-2 smallerText\">{hourlyForecast.humidity}%</span></h5>\n                        <h5>Air Pressure <span className=\"ml-2 smallerText\">{pressure} in</span></h5>\n                        <h5>Wind Speed <span className=\"ml-2 smallerText\">{windSpeed} mph</span></h5>\n                    </CardBody>\n                    </Card>\n                : null\n        )\n    })}\n    </Row>\n    )\n}\n\nexport default HourlyForecast;","import React from \"react\";\nimport {useSelector} from \"react-redux\";\nimport {Col, Row, Card, CardBody, CardText, CardHeader, CardFooter} from \"reactstrap\";\n\nconst FiveDayForecast = (props) => {\n\n    const componentName = \"FiveDayForecast.js\";\n\n    const weatherData = useSelector(state => state.weather.weatherData);\n\n    const dailyForecastWeatherData = weatherData.daily;\n    // console.log(componentName, \"dailyForecastWeatherData\", dailyForecastWeatherData);\n\n    const calculateDay = (forecastIndex) => {\n\n        let currentDate = new Date();\n        let currentDay = currentDate.getDay();\n        // console.log(componentName, \"currentDay\", currentDay);\n\n        let weekDays = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n\n        let dayForecast = currentDay + forecastIndex + 1; // To account for the index starting at zero.\n\n        // Account for numbers over 7 days\n        // dayForecast +=  7;\n        if (dayForecast > 6) {\n            dayForecast = dayForecast - 7;\n        };\n\n        return weekDays[dayForecast];\n    };\n\n    return(\n        <Row className=\"justify-content-center my-4\">\n        {dailyForecastWeatherData.map((dailyForecast, index) => {\n\n            // convert wind speed from m/s to mph\n            let windSpeed = (dailyForecast.wind_speed * 2.23694).toPrecision(2);\n            let pressure = (dailyForecast.pressure * 0.030).toPrecision(4);\n\n            let dailyHighTemperatureFahrenheit = Math.floor(((dailyForecast.temp.max - 273.15)*1.8)+32);\n            let dailyLowTemperatureFahrenheit = Math.floor(((dailyForecast.temp.min - 273.15)*1.8)+32);\n\n            return (\n                index < 5 ? \n                <Card key={index} className=\"m-2\">\n                    <CardHeader>\n                    <h3 className=\"text-center\">{calculateDay(index)}</h3>\n                    </CardHeader>\n                    <CardBody>\n                    <h4 className=\"text-center\">{dailyForecast.weather[0].main}</h4>\n                    <h5>Temperature</h5>\n                    <div className=\"ml-2\">High {dailyHighTemperatureFahrenheit}&#176;</div>\n                    <div className=\"ml-2 mb-2\">Low {dailyLowTemperatureFahrenheit}&#176;</div>\n                    <h5>Humidity <span className=\"ml-2 smallerText\">{dailyForecast.humidity}%</span></h5>\n                    <h5>Air Pressure <span className=\"ml-2 smallerText\">{pressure} in</span></h5>\n                    <h5>Wind Speed <span className=\"ml-2 smallerText\">{windSpeed} mph</span></h5>\n                    </CardBody>\n                    </Card>\n                : null\n        )\n    })}\n    </Row>\n    )\n}\n\nexport default FiveDayForecast;","import React, {useState, useEffect} from \"react\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {Container, Col, Row, Jumbotron, Alert} from \"reactstrap\";\nimport {setWeatherData, setCurrentWeather, setHourlyForecast, setDailyForecast} from \"../../app/weatherSlice\";\nimport CurrentWeather from \"./CurrentWeather\"\nimport HourlyForecast from \"./HourlyForecast\"\nimport FiveDayForecast from \"./FiveDayForecast\"\nimport WeatherDataOneCall from \"./WeatherDataOneCall.json\";\n\nconst Weather = (props) => {\n\n    const componentName = \"Weather.js\";\n\n    // const appOffline = true;\n    const appOffline = false;\n\n    const dispatch = useDispatch();\n\n    const zipCode = useSelector(state => state.location.zipCode);\n    const latitude = useSelector(state => state.location.latitude);\n    const longitude = useSelector(state => state.location.longitude);\n\n    const zipCodeData = useSelector(state => state.location.zipCodeData);\n    \n    const [errWeatherMessage, setErrWeatherMessage] = useState(\"\");\n\n    const weatherData = useSelector(state => state.weather.weatherData);\n\n    // Current weather data\n    // For latitude and longitude plus zip code\n    // const baseURL=\"https://api.openweathermap.org/data/2.5/weather\";\n\n    // One Call API\n    // Current and forecast weather data\n    // Only for latitude and longitude\n    // https://openweathermap.org/api/one-call-api\n    const baseURL=\"https://api.openweathermap.org/data/2.5/onecall\";\n    const key = process.env.REACT_APP_OPENWEATHER_API_KEY;\n    // console.log(componentName, \"process.env.REACT_APP_OPENWEATHER_API_KEY\", process.env.REACT_APP_OPENWEATHER_API_KEY);\n    // console.log(componentName, \"key\", key);\n\n\n    useEffect(() => {\n        // console.log(componentName, \"useEffect\");\n        // console.log(componentName, \"useEffect zipCode\", zipCode);\n        // console.log(componentName, \"useEffect latitude\", latitude);\n        // console.log(componentName, \"useEffect longitude\", longitude);\n\n        // console.log(componentName, \"useEffect appOffline\", appOffline);\n\n        if (!appOffline) {\n            let url = \"\";\n            let locationDataAvailable = false;\n\n            if (latitude !== \"\" && latitude !== undefined && longitude !== \"\" && longitude !== undefined) {\n                // let url = `${baseURL}?lat=${latitude}&lon=${longitude}&appid=${key}&units=metric`;\n                url = `${baseURL}?lat=${latitude}&lon=${longitude}&appid=${key}`;\n                locationDataAvailable = true;\n            // } else if (zipCode !== \"\" && zipCode !== undefined) {\n            //     // // let url = `https://api.openweathermap.org/data/2.5/weather?zip=${zipCode}&appid=${key}`&units=metric`;\n            //     // url = `https://api.openweathermap.org/data/2.5/weather?zip=${zipCode}&appid=${key}`;\n            //     // locationDataAvailable = true;\n            } else {\n                locationDataAvailable = false;\n            };\n\n            if (locationDataAvailable) {\n                fetch(url)\n                .then(response => {\n                    // console.log(componentName, \"useEffect response\", response);\n                    if (!response.ok) {\n                        throw Error(response.status + \" \" + response.statusText + \" \" + response.url);\n                    } else {\n                        return response.json();\n                    };\n                })\n                .then(data => {\n                    // console.log(componentName, \"useEffect data\", data);\n\n                    // For current and forecast weather data / One Call API \n                    dispatch(setWeatherData(data));\n                    // dispatch(setCurrentWeather(data.current));\n                    // dispatch(setHourlyForecast(data.hourly));\n                    // dispatch(setDailyForecast(data.daily));\n\n                })\n                .catch(error => {\n                    console.log(componentName, \"useEffect error\", error);\n                    // console.log(componentName, \"useEffect error.name\", error.name);\n                    // console.log(componentName, \"useEffect error.message\", error.message);\n                    setErrWeatherMessage(error.name + \": \" + error.message);\n                });\n\n            };\n\n        } else {\n            // console.log(componentName, \"useEffect WeatherDataOneCall\", WeatherDataOneCall);\n            // setWeatherData(WeatherDataOneCall);\n            dispatch(setWeatherData(WeatherDataOneCall));\n            // dispatch(setCurrentWeather(WeatherDataOneCall.current));\n            // dispatch(setHourlyForecast(WeatherDataOneCall.hourly));\n            // dispatch(setDailyForecast(WeatherDataOneCall.daily));\n        };\n\n    }, [latitude, longitude]);\n\n    return(\n        <Container fluid className=\"mt-4\">\n            <Row>\n            {errWeatherMessage !== \"\" ? <Alert color=\"danger\" className=\"m-2\">{errWeatherMessage}</Alert> : null}\n            </Row>\n\n            <Row className=\"my-4\">\n                <Col>\n                <Jumbotron fluid className=\"currently\">\n                    <Container>\n                        <h1 className=\"display-4 text-center\">Currently</h1>\n                        {latitude !== \"\" && longitude !== \"\" && weatherData.hasOwnProperty(\"timezone\") ? <p className=\"lead text-center\">{weatherData.timezone}</p> : null}\n                    </Container>\n                </Jumbotron>\n                </Col>\n                <Col>\n                    {latitude !== \"\" && longitude !== \"\" && weatherData.hasOwnProperty(\"timezone\") ? <CurrentWeather /> : null}\n                </Col>\n            </Row>\n\n            {latitude !== \"\" && longitude !== \"\" && weatherData.hasOwnProperty(\"timezone\") ?\n            <React.Fragment>\n                <Row className=\"my-4\">\n                    <Col xs=\"12\">\n                        <Jumbotron fluid className=\"today\">\n                            <Container>\n                            <h1 className=\"display-4 text-center\">Today</h1>\n                            </Container>\n                        </Jumbotron>\n                    </Col>\n                </Row>\n                <HourlyForecast />\n\n                <Row className=\"my-4\">\n                    <Col xs=\"12\">\n                        <Jumbotron fluid className=\"thisWeek\">\n                            <Container>\n                            <h1 className=\"display-4 text-center\">This Week</h1>\n                            </Container>\n                        </Jumbotron>\n                    </Col>\n                </Row>\n                <FiveDayForecast />\n            </React.Fragment>\n            : null}\n\n            {/* <Row>\n                <span>\n                    {zipCodeData.hasOwnProperty(\"lat\") ? JSON.stringify(zipCodeData) : null}\n                </span>\n            </Row>\n            <Row>\n                <span>\n                    {weatherData.hasOwnProperty(\"timezone\") ? JSON.stringify(weatherData) : null}\n                </span>\n            </Row> */}\n        </Container>\n    );\n};\n\nexport default Weather;\n","import React, {useState} from \"react\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {Container, Col, Row, Alert, Button, Form, FormGroup, Label, Input} from \"reactstrap\";\nimport {setZipCode, setLatitude, setLongitude, setZipCodeData} from \"../../app/locationSlice\";\nimport zipCodeOfflineData from \"./zipCodeOfflineData.json\";\n\nconst ZipCode = (props) => {\n\n    const componentName = \"ZipCode.js\";\n\n    // const appOffline = true;\n    const appOffline = false;\n\n    const dispatch = useDispatch();\n\n    const [txtZipCode, setTxtZipCode] = useState(\"\");\n    const [errZipCodeMessage, setErrWZipCodeMessage] = useState(\"\");\n\n    const zipCodeData = useSelector(state => state.location.zipCodeData);\n\n    // Google Maps API\n    // Get longitude and latitude from zip codes\n    // https://developers.google.com/maps/documentation/geocoding/overview?csw=1\n    // key=API_KEY\n    // const baseURL = \"https://maps.googleapis.com/maps/api/geocode/json\";\n    // const key = process.env.REACT_APP_GOOGLE_MAPS_API_KEY;\n\n    // Zip Code API\n    // Get longitude and latitude from zip codes\n    // http://www.zipcodeapi.com/API\n    const baseURL = \"http://www.zipcodeapi.com/rest\";\n    const key = process.env.REACT_APP_ZIP_CODE_API_KEY;\n\n    // https://cors-anywhere.herokuapp.com\n    // https://stackoverflow.com/questions/43871637/no-access-control-allow-origin-header-is-present-on-the-requested-resource-whe\n    const proxyurl = \"https://cors-anywhere.herokuapp.com/\";\n\n    const submitZipCode = () => {\n        // console.log(componentName, \"submitZipCode\");\n\n        if (txtZipCode !== \"\" && !isNaN(txtZipCode)) {\n\n            dispatch(setZipCode(txtZipCode));\n\n            if (!appOffline) {\n\n                // Google Maps API\n                // let url = `${baseURL}?address=${txtZipCode}&key=${key}`;\n                // let url = `${baseURL}?components=postal_code:${txtZipCode}&key=${key}`;\n\n                // Zip Code API\n                let url = `${baseURL}/${key}/info.json/${txtZipCode}/degrees`;\n\n                fetch(proxyurl + url)\n                .then(response => {\n                    // console.log(componentName, \"submitZipCode response\", response);\n                    if (!response.ok) {\n                        throw Error(response.status + \" \" + response.statusText + \" \" + response.url);\n                    } else {\n                        return response.json();\n                    };\n                })\n                .then(data => {\n                    // console.log(componentName, \"submitZipCode data\", data);\n                    // console.log(componentName, \"submitZipCode data.lat\", data.lat);\n                    // console.log(componentName, \"submitZipCode data.lng\", data.lng);\n\n                    dispatch(setZipCodeData(data));\n                    dispatch(setLatitude(data.lat));\n                    dispatch(setLongitude(data.lng));\n\n                })\n                .catch(error => {\n                    console.log(componentName, \"submitZipCode error\", error);\n                    // console.log(componentName, \"submitZipCode error.name\", error.name);\n                    // console.log(componentName, \"submitZipCode error.message\", error.message);\n                    setErrWZipCodeMessage(error.name + \": \" + error.message);\n                });\n\n            } else {\n                // console.log(componentName, \"submitZipCode zipCodeOfflineData\", zipCodeOfflineData);\n                // console.log(componentName, \"submitZipCode zipCodeOfflineData.lat\", zipCodeOfflineData.lat);\n                // console.log(componentName, \"submitZipCode zipCodeOfflineData.lng\", zipCodeOfflineData.lng);\n                dispatch(setZipCodeData(zipCodeOfflineData));\n                dispatch(setLatitude(zipCodeOfflineData.lat));\n                dispatch(setLongitude(zipCodeOfflineData.lng));\n            };\n\n        } else {\n            setErrWZipCodeMessage(\"Please enter a valid zip code.\")\n        };\n\n    };\n\n    return(\n        <Container>\n            <Row className=\"justify-content-center mt-4\">\n                <Col sm=\"4\">\n                {errZipCodeMessage !== \"\" ? <Alert color=\"danger\">{errZipCodeMessage}</Alert> : null}\n                    <Form>\n                        <FormGroup>\n                            <Label for=\"txtZipCode\">Please Enter Your Zip Code</Label>\n                            <Input type=\"text\" id=\"txtZipCode\" size=\"lg\" value={txtZipCode} onChange={(event) => {/*console.log(event.target.value);*/ setTxtZipCode(event.target.value);}} />\n                        </FormGroup>\n                        <Button outline size=\"lg\" color=\"primary\" onClick={submitZipCode}>Submit</Button>\n                    </Form>\n                </Col>\n            </Row>\n            {/* <Row>\n                <span>\n                    {zipCodeData.hasOwnProperty(\"lat\") ? JSON.stringify(zipCodeData) : null}\n                </span>\n            </Row> */}\n        </Container>\n    );\n};\n\nexport default ZipCode;\n","import React, {useState, useEffect} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport './App.css';\r\nimport {Container, Col, Row, Jumbotron, Alert} from \"reactstrap\";\r\nimport {setLatitude, setLongitude} from \"./app/locationSlice\";\r\nimport Weather from \"./components/weather/Weather\";\r\nimport ZipCode from \"./components/zipCode/ZipCode\";\r\n\r\nfunction App() {\r\n\r\n  const componentName = \"App.js\";\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const zipCode = useSelector(state => state.location.zipCode);\r\n  const latitude = useSelector(state => state.location.latitude);\r\n  const longitude = useSelector(state => state.location.longitude);\r\n\r\n  const [checkingLocationMessage, setCheckingLocationMessage] = useState(\"Checking for your location.\");\r\n  const [locationDataFound, setLocationDataFound] = useState(false);\r\n  const [locationDataMessage, setLocationDataMessage] = useState(\"\");\r\n  const [errLocationData, setErrLocationData] = useState(\"\");\r\n  const [geolocationAvailable, setGeolocationAvailable] = useState(false);\r\n  const [showZipCodeForm, setShowZipCodeForm] = useState(false);\r\n\r\n  const getLocation = () => {\r\n    if (navigator.geolocation) {\r\n      // console.log(componentName, \"getLocation navigator.geolocation\", navigator.geolocation);\r\n      navigator.geolocation.getCurrentPosition(showPosition);\r\n    } else {\r\n      // console.log(componentName, \"getLocation Geolocation is not supported by this browser.\");\r\n      setErrLocationData(\"Geolocation is not supported by this browser.\");\r\n    };\r\n  };\r\n\r\n  const showPosition = (position) => {\r\n    // console.log(componentName, \"showPosition position: \", position);\r\n    // console.log(componentName, \"showPosition Latitude: \", position.coords.latitude, \"Longitude: \", position.coords.longitude);\r\n\r\n    dispatch(setLatitude(position.coords.latitude));\r\n    dispatch(setLongitude(position.coords.longitude));\r\n    setCheckingLocationMessage(\"\");\r\n    determineShowZipCodeForm();\r\n  };\r\n\r\n  const determineShowZipCodeForm = () => {\r\n    // console.log(componentName, \"showZipCodeForm\");\r\n    if (zipCode !== \"\" && zipCode !== undefined) {\r\n      // console.log(componentName, \"showZipCodeForm zipCode\", zipCode);\r\n      setShowZipCodeForm(false);\r\n    } else if (latitude !== \"\" && latitude !== undefined && longitude !== \"\" && longitude !== undefined) {\r\n      // console.log(componentName, \"useEffect Latitude: \", latitude, \"Longitude: \", longitude);\r\n      setShowZipCodeForm(false);\r\n    } else if (checkingLocationMessage === \"\" && !locationDataFound) {\r\n      // console.log(componentName, \"showZipCodeForm checkingLocationMessage === \\\"\\\"\");\r\n      // console.log(componentName, \"showZipCodeForm !locationDataFound\", locationDataFound);\r\n      setShowZipCodeForm(true);\r\n    } else if (!geolocationAvailable && !locationDataFound) {\r\n      // console.log(componentName, \"showZipCodeForm !geolocationAvailable\", geolocationAvailable);\r\n      // console.log(componentName, \"showZipCodeForm !locationDataFound\", locationDataFound);\r\n      setShowZipCodeForm(true);\r\n    // } else if (!locationDataFound) {\r\n    //   console.log(componentName, \"showZipCodeForm !locationDataFound\", locationDataFound);\r\n    //   setShowZipCodeForm(true);\r\n    } else {\r\n      // console.log(componentName, \"showZipCodeForm else\");\r\n      setShowZipCodeForm(false);\r\n    };\r\n  };\r\n\r\n  useEffect(() => {\r\n    getLocation();\r\n  }, [getLocation]);\r\n\r\n  useEffect(() => {\r\n    setTimeout(function(){setCheckingLocationMessage(\"\"); determineShowZipCodeForm();}, 4000);\r\n    // let checkingLocation = setInterval(function(){console.log(componentName, \"checkingLocation\"); setCheckingLocationMessage(\"\"); determineShowZipCodeForm(); clearInterval(checkingLocation);}, 4000);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (!geolocationAvailable) {\r\n      // console.log(componentName, \"useEffect geolocationAvailable\", geolocationAvailable);\r\n      // console.log(componentName, \"useEffect Location is not available.\");\r\n      // setErrLocationData(\"Location is not available.\");\r\n    } else {\r\n      setErrLocationData(\"\");\r\n    };\r\n  }, [geolocationAvailable]);\r\n\r\n  useEffect(() => {\r\n    if (zipCode !== \"\" && zipCode !== undefined) {\r\n      // console.log(componentName, \"useEffect zipCode: \", zipCode);\r\n      setLocationDataMessage(\"Zip Code: \" + zipCode);\r\n      setGeolocationAvailable(true);\r\n      setLocationDataFound(true);\r\n      determineShowZipCodeForm();\r\n    } else if (latitude !== \"\" && latitude !== undefined && longitude !== \"\" && longitude !== undefined) {\r\n      // console.log(componentName, \"useEffect Latitude: \", latitude, \"Longitude: \", longitude);\r\n      setLocationDataMessage(\"Latitude: \" + latitude + \" Longitude: \" + longitude);\r\n      setGeolocationAvailable(true);\r\n      setLocationDataFound(true);\r\n      determineShowZipCodeForm();\r\n    } else {\r\n      setGeolocationAvailable(false);\r\n      setLocationDataFound(false);\r\n    };\r\n  }, [zipCode, latitude, longitude, determineShowZipCodeForm]);\r\n\r\n  const locationComponents = () => {\r\n    return (\r\n      <React.Fragment>\r\n        {/* {locationDataMessage !== \"\" ? <Alert color=\"info\" className=\"m-2\">{locationDataMessage}</Alert> : null} */}\r\n        <Weather />\r\n      </React.Fragment>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Jumbotron fluid className=\"header\">\r\n        <Container>\r\n          <h1 className=\"display-4 text-center\">Local Weather Forecast</h1>\r\n        </Container>\r\n      </Jumbotron>\r\n\r\n      <Container fluid>\r\n      <Row className=\"justify-content-center\">\r\n        <Col sm=\"6\">\r\n            {checkingLocationMessage !== \"\" ? <Alert color=\"info\" className=\"m-2\">{checkingLocationMessage}</Alert> : null}\r\n            {errLocationData !== \"\" ? <Alert color=\"danger\" className=\"m-2\">{errLocationData}</Alert> : null}\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col>\r\n            {showZipCodeForm ? <ZipCode /> : null}\r\n            {locationDataFound ? locationComponents() : null}\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n      </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import {configureStore} from \"@reduxjs/toolkit\";\r\nimport locationReducer from \"./locationSlice\";\r\nimport weatherReducer from \"./weatherSlice\";\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    location: locationReducer,\r\n    weather: weatherReducer\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}